########################################
## open-commons-json
########################################
# java class
open-commons-json.class={imports}\
			\n{java-doc}\
            \n{indent}public {static} class {class} extends DefaultJSONModel${\
            \n\
            \n{serializable}\
            \n{fields}\
            \n{indent}\tpublic {class} ()${$}\
            \n{methods}\
            \n{nestedclass}\
            \n{indent}$}
# import
open-commons-json.import=import {qualifier};
# field without a default value
open-commons-json.field = @JSONField(name=\"{jsonKey}\")\
            \nprivate {type} {var};
# field with a default value            
open-commons-json.field_with_value=@JSONField(name=\"{jsonKey}\")\
            \nprivate {type} {var} = {value};
# setter method            
open-commons-json.setter=/**\
            \n *\
            \n * @param {var} {var} to set.\
            \n *\
            \n * @since {date}\
            \n */\
            \npublic void set{name} ({type} {var}) ${\
            \n\tthis.{var} = {var};\
            \n$}
# getter method
open-commons-json.getter=/**\
            \n *\
            \n * @return {var}\
            \n *\
            \n * @since {date}\
            \n */\
            \npublic {type} get{name} () ${\
            \n\treturn this.{var};\
            \n$}
# JSON Array format
open-commons-json.fieldImport=["open.commons.json.annotation.JSONField"]
# JSON Array format
open-commons-json.objectImport=["open.commons.json.model.DefaultJSONModel"]
# null type
open-commons-json.nullType=String
#open-commons-json.nullTypeValue=null
# JSON Array format
open-commons-json.nullTypeImport=["java.util.Map", "java.util.HashMap"]
open-commons-json.serializable=private static final long serialVersionUID = 1L;
open-commons-json.arrayhandler={"type":"List<\{elemType\}>", "class":"new ArrayList<>()"}
open-commons-json.extension=java

            
########################################
## general-java-bean
########################################
# java class
general-java-bean.class={imports}\
			\n{java-doc}\
            \n{indent}public {static} class {class}${\
            \n{fields}\
            \n{indent}\tpublic {class} ()${$}\
            \n{methods}\
            \n{nestedclass}\
            \n{indent}$}
# import            
general-java-bean.import=import {qualifier};
# field without a default value
general-java-bean.field=/** JSON name: "{jsonKey}" */\
			\nprivate {type} {var};
# field with a default value            
general-java-bean.field_with_value=/** JSON name: "{jsonKey}" */\
            \nprivate {type} {var} = {value};
# setter method            
general-java-bean.setter=${open-commons-json.setter}
# getter method
general-java-bean.getter=${open-commons-json.getter}
# null type
general-java-bean.nullType=String
general-java-bean.arrayhandler=${open-commons-json.arrayhandler}
general-java-bean.extension=java

########################################
## javascript
########################################
javascript-object.class={class} = function({arguments}) ${\
            \n{fields}\
            $}\
            \n{methods}\
			\n{nestedclass}
# import            
# field without a default value
javascript-object.field=this.{jsonKey};
# field with a default value            
javascript-object.field_with_value=this.{jsonKey} = {value};
# setter method            
javascript-object.setter={object}.prototype.set{name}({var})${\
			\n\tthis.{jsonKey} = {var};\
			\n$}
# getter method
javascript-object.getter={object}.prototype.get{name}()${\
			\n\treturn this.{jsonKey};\
			\n$}
# null type
javascript-object.nullType=String
javascript-object.arrayhandler={"type":"", "class":"[]"}
javascript-object.extension=js